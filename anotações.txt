Dependencias do projeto:

Spring Boot, Spring Data, JPA, Spring Secutiry, docker, swagger2

Plugin Builder Generator (Aula 11)


------------


http://localhost:8080/v2/api-docs
http://localhost:8080/swagger-ui.html

Documentacao:
https://www.treinaweb.com.br/blog/documentando-uma-api-spring-boot-com-o-swagger/
https://github.com/swagger-api/swagger-core/wiki/Annotations
http://springfox.github.io/springfox/docs/snapshot/#quick-start-guides


------------



para abrir requisicao pra qualquer dominio, usar @CrossOrigin(origins="*")
para limitar requisicoes para apenas um dominino, utilizar CrossOrigin(origins="O_DOMINIO_PERMITIDO")


------------
Atalhos:

ctrl + alt + L auto indent shortcut

ctrl + alt + O remove imports nao utilizados

alt + shift + B gera o builder

ctrl + / comenta

ctrl + shift + E navegar pelos arquivos

ctrl + alt + v cria variavel local

alt + enter cria variavel local

------------

@Entity: faz uma ligacao entre a classe que leva essa notacao e o banco de dados, criando uma tabela no banco com esse mesmo nome e com campos de acordo com as variaveis definidas nesta classe

@Controller: associada com classes que possuem métodos que processam requests numa aplicação web. Meu comentário: É geralmente a classe que tem o RequestMapping e tal

@RestController: igual o controller, mas retorna um JSON, entao é melhor usar @RestController

@Component: é um estereótipo genérico para qualquer componente gerenciado pelo Spring; Meu comentário: Só fala pro spring que essa classe vai ser usada com ele.

@Service faz anotações de classes na camada de serviço; Meu comentário: sei lá o que é camada de serviço

@Repository anota classes na camada de persistência, que atuará como um repositório de banco de dados, além de capturar exceções específicas de persistência e repeti-las novamente como uma das exceções não verificadas e unificadas do Spring. Meu comentário: Tem que usar isso no DAO.

@SpringBootApplication: mesma coisa que usar @Configuration, @EnableAutoConfigation e @ComponentScan

@MappedSuperclass informa que a classe nao é pra ser mapeada no banco de dados, que só é uma classe de negócio para ser extendida

@ControllerAdvice allows you to handle exceptions across the whole application, not just to an individual controller.

@Transactional faz um rollback no banco de dados quando dentro de um método voce faz alguma alteracao no banco e esse método posteriormente quebra por algum motivo que nao foi na hora de modificar o banco, retornando um erro. Como o método quebrou (lançou throw), nao podemos persistir as alteracoes no banco, entao esse Transactional anotado no método desfaz as alteracoes. Pra isso, precisa usar banco que suporta Transactional. Apenas o InnoDB pra windows suporta. Pra criar tabelas com InnoDB, tem que setar no applcation.properties spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect  (notar na ultima palavra, que normalmente vem como MySQL5Dialect. Tem que inserir o InnoDB no meio)

@NotEmpty usado no model pra nao permitir campos vazios
Além de NotEmpty, existem varios outros validators. Um, por exemplo, é @Email

@Valid normalmente se usa no endpoint que está recebendo um parâmetro, para validar se o parametro é valido com base no model anotado com tag @NotEmpty


---------------

Tratamento de exceção:

na classe ResponseEntityExceptionHanler.class, do Spring, ele faz por default o tratamento da grande maioria das exceptions lançadas pelo HTTP
Caso queira sobrescrever algum tratamento em específico, é só extender essa classe num ExceptionHandler que eu mesmo criar (exemplo do
handleArgumentNotValidException do RestExceptionHandler.java

Importante: nao é possivel usar mais de um @ExceptionHandler quando dou extends no ResponseEntityExceptionHandler porque dá problema



---------------

PADRÕES RESTfull

Usar endpoints no plural ("student" vira "students")

sempre que for um get, deixar na raiz do endpoint.
Exemplo: se quer estudantes, nao precisa fazer um students/list. Só deixar o get no students mesmo

Para tratar um erro geral, extender ResponseEntityExceptionHandler e sobrescrever handleExceptionInternal


------------

paginação:

geralmente utilizado pra limitar os dados que sao enviados. Se um cara ta no mobile e usando dados moveis, por ex, vai queimar os dados moveis do cara. Entao é bom limitar o tanto de dados que o usuario recebe.
Pra isso, coloquei extends PagingAndSortingRepository no StudentRepository e no ListAll do endpoint passei como parametro o Pageable pageable e no studentDAO.findAll(pageable)
tambem. A partir dai, ja comeca a retornar páginas e é possivel controlar passando os parametros page=0 e size=5 da seguinte forma: localhost:8080/students?page=0&size=5

Para mudar quantos elementos aparecem por página é necessário utilizar o Adapter, implementando o WebMvcConfigurer e usando addArgumentResolvers, igual pode ser visto no commit Paginacao em requisicoes REST

Sorting de paginacao:

Só adicionar os parametros do sorting no final da URL. Exemplo: localhost:8080/students?sort=name,asc&sort=email,desc
